<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="SQLite query" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="390" y="88">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import sqlite3

import threading
import time
import datetime


class SQLiteThread(threading.Thread):


    def __init__(self, dbfile, box):
        super(SQLiteThread, self).__init__()
        self.mDbfile = dbfile
        self.mUnloading = False
        self.mQuery = ""
        self.mIsRunning = False
        self.mSem1 = threading.Semaphore(0)
        self.mSem2 = threading.Semaphore(0)
        self.mBox = box

    def run(self):
        self.mBox.logger.info("=== Entering sqlite thread ===")

        self.con = sqlite3.connect(self.mDbfile)
        self.con.text_factory = str
        self.mIsRunning = True
        while not self.mUnloading:
            self.mSem1.acquire()
            self.mResult = []
            if len(self.mQuery) > 0:
                self.mResult = []
                r = self.con.execute(self.mQuery)
                self.mResult = r.fetchall()
            self.mSem2.release()

        self.mBox.logger.info(" === closing sqlite connection === ")
        self.con.close()

        self.mBox.logger.info(" === ending sqlite thread === ")


    def onExit(self):
        self.mUnloading = True
        self.mQuery = ""
        self.mSem1.release()

    def onExecuteQuery(self, query):
        self.mQuery = query
        self.mSem1.release()
        self.mSem2.acquire()
        return self.mResult


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        global TKSQliteThreads

        self.sqliteGlobalLock = None

        if "TKSQliteThreads" in globals():
            self.sqliteGlobalLock = TKSQliteThreads[0]["lock"]
        else:
            self.sqliteGlobalLock = threading.Lock()
            TKSQliteThreads = [{"file":"global", "thread":None, "lock":self.sqliteGlobalLock, "count":0}]

        with self.sqliteGlobalLock:
            self.framemanager = ALProxy("ALFrameManager")

            self.dbfile = self.getParameter("sqlite db file")
            self.dbfilepath = self.framemanager.getBehaviorPath(self.behaviorId) + self.dbfile

            self.sqlThread = None
            for t in TKSQliteThreads:
                if t["file"] == self.dbfilepath:
                    self.sqlThread = t["thread"]
                    self.dbLock = t["lock"]
                    count = t["count"] + 1
                    t["count"] = count
                    self.logger.info("SQLite query <OPEN> FILE:%s REF=%d" % (self.dbfile,count))
                    break

            if self.sqlThread == None:
                self.logger.info("SQLite query <OPEN> FILE:%s REF=1" % self.dbfile)
                self.sqlThread = SQLiteThread(self.dbfilepath,self)
                self.dbLock = threading.Lock()

                TKSQliteThreads.append({"file":self.dbfilepath, "thread":self.sqlThread, "lock":self.dbLock, "count":1})
                self.sqlThread.start()

    def onUnload(self):
        if self.sqlThread:
            with self.sqliteGlobalLock:
                for t in TKSQliteThreads:
                    if t["file"] == self.dbfilepath:
                        t["count"] = t["count"] - 1
                        self.logger.info("SQLite query <CLOSE> FILE:%s REF=%d" % (self.dbfile,t["count"]))
                        if t["count"] <= 0:
                            TKSQliteThreads.remove(t)
                            self.sqlThread.onExit()
                        break

    def onInput_onStart(self, p):
        if self.sqlThread:
            with self.dbLock:
                return self.onResult(self.sqlThread.onExecuteQuery(p))

        else:
            return self.onResult([])

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="onResult" type="0" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                            <Parameter name="sqlite db file" inherits_from_parent="0" content_type="4" value="/../sample1.sqlite" default_value="" tooltip="" id="6" />
                        </Box>
                        <Box name="Query String" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="125" y="104">
                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("select * from member where name=\'山田　太郎\'")]]>
</content>
                            </script>
                            <pluginContent>
                                <text>
                                    <![CDATA[select * from member where name='山田　太郎']]>
</text>
                            </pluginContent>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                        </Box>
                        <Box name="Log" id="3" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="669" y="182">
                            <bitmap>media/images/box/print.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                            <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="Message text" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                            <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                <Choice value="Fatal" />
                                <Choice value="Error" />
                                <Choice value="Warning" />
                                <Choice value="Info" />
                                <Choice value="Debug" />
                            </Parameter>
                        </Box>
                        <Box name="Python Script" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="524" y="90">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        if len(p) > 0:
            r = p[0]
            self.memberid(r[0])
            self.name(r[1])
            self.name_yomi(r[2])
            self.age(r[3])
            self.gender(r[4])

            out = "なまえ %s 性別は %s 年齢は %s です" % (r[2], r[4], r[3])
            self.output(out)


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="memberid" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                            <Output name="name" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                            <Output name="name_yomi" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                            <Output name="age" type="3" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                            <Output name="gender" type="3" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                            <Output name="output" type="3" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                        </Box>
                        <Box name="Say Text" id="5" localization="8" tooltip="Say the text received on its input." x="668" y="300">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" />
                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="5" />
                        <Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="10" />
                        <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="10" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
